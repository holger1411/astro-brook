---
import '../styles/global.css';
import { ViewTransitions } from 'astro:transitions';

interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: 'website' | 'article';
  publishedDate?: Date;
  modifiedDate?: Date;
  author?: string;
}

const { 
  title, 
  description = "A minimalist blog template focusing on clean typography and distraction-free reading experience.", 
  image = "/og-image.png",
  type = "website",
  publishedDate,
  modifiedDate,
  author = "Brook Team"
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const ogImageURL = image.startsWith('/') ? new URL(image, Astro.site) : image;
const siteName = "Brook Blog";

// Strukturierte Daten (JSON-LD) für bessere SEO
const jsonLDWebsite = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": siteName,
  "url": Astro.site?.toString(),
  "description": description,
};

const jsonLDArticle = publishedDate ? {
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": title,
  "image": ogImageURL.toString(),
  "author": {
    "@type": "Person",
    "name": author
  },
  "publisher": {
    "@type": "Organization",
    "name": siteName,
    "logo": {
      "@type": "ImageObject",
      "url": new URL("/favicon.svg", Astro.site).toString()
    }
  },
  "datePublished": publishedDate.toISOString(),
  "dateModified": modifiedDate ? modifiedDate.toISOString() : publishedDate.toISOString(),
  "mainEntityOfPage": canonicalURL.toString(),
} : null;

const jsonLD = type === 'article' && jsonLDArticle ? jsonLDArticle : jsonLDWebsite;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title} | Brook</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Aktivieren der View Transitions -->
    <ViewTransitions />
    
    <!-- Inter Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImageURL} />
    <meta property="og:site_name" content={siteName} />
    {publishedDate && <meta property="article:published_time" content={publishedDate.toISOString()} />}
    {modifiedDate && <meta property="article:modified_time" content={modifiedDate.toISOString()} />}

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogImageURL} />
    
    <!-- Strukturierte Daten für SEO -->
    <script type="application/ld+json" set:html={JSON.stringify(jsonLD)} />
    
    <!-- Theme handling - wird initial beim Laden ausgeführt -->
    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
        document.body.style.backgroundColor = "#010101";
        document.body.style.color = "#f3f4f6";
      } else {
        document.documentElement.classList.remove('dark');
        document.body.style.backgroundColor = "#ffffff";
        document.body.style.color = "#111827";
      }
      
      window.localStorage.setItem('theme', theme);
    </script>
    
    <style is:global>
      :root {
        --color-bg: #ffffff;
        --color-text: #111827;
        --color-text-light: #4b5563;
        --color-border: #e5e7eb;
        --color-accent: #000000;
      }
      
      .dark {
        --color-bg: #010101;
        --color-text: #f3f4f6;
        --color-text-light: #9ca3af;
        --color-border: #222222;
        --color-accent: #ffffff;
      }
      
      html, body {
        min-height: 100vh;
      }
      
      html.dark {
        background-color: #010101;
      }
      
      html:not(.dark) {
        background-color: #ffffff;
      }
      
      body {
        font-family: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        font-size: 18px;
        line-height: 1.6;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
      
      .dark .theme-toggle {
        background-color: #ffffff !important;
      }
      
      .theme-toggle {
        padding: 0.5rem;
        border-radius: 0.375rem;
        background-color: #f3f4f6;
        border: none;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <div class="mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
      <header class="py-8 flex items-center justify-between">
        <a href="/" class="text-2xl font-semibold" transition:animate="fade">Brook</a>
        
        <nav class="flex items-center gap-6">
          <a href="/" class="nav-link">Home</a>
          <a href="/journal" class="nav-link">Journal</a>
          <a href="/about" class="nav-link">About</a>
          <button id="theme-toggle" aria-label="Toggle theme" class="theme-toggle">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="hidden dark:block">
              <circle cx="12" cy="12" r="5"></circle>
              <line x1="12" y1="1" x2="12" y2="3"></line>
              <line x1="12" y1="21" x2="12" y2="23"></line>
              <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
              <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
              <line x1="1" y1="12" x2="3" y2="12"></line>
              <line x1="21" y1="12" x2="23" y2="12"></line>
              <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
              <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
            </svg>
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="block dark:hidden">
              <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
            </svg>
          </button>
        </nav>
      </header>
      
      <main class="py-10" transition:animate="fade">
        <slot />
      </main>
      
      <footer class="py-8 border-t mt-12">
        <div class="flex flex-col md:flex-row justify-between items-center gap-4">
          <div class="footer-text">
            &copy; {new Date().getFullYear()} Brook Blog. All rights reserved.
          </div>
          <nav class="flex items-center gap-4">
            <a href="/" class="footer-link">Home</a>
            <a href="/journal" class="footer-link">Journal</a>
            <a href="/about" class="footer-link">About</a>
          </nav>
        </div>
      </footer>
    </div>
    
    <!-- Theme toggling script mit ViewTransitions Unterstützung -->
    <script is:inline>
      // Bei jedem Seitenwechsel Event Listener neu hinzufügen (ViewTransitions kompatible Version)
      document.addEventListener('astro:page-load', () => {
        const themeToggle = document.getElementById('theme-toggle');
        
        if (themeToggle) {
          themeToggle.addEventListener('click', () => {
            const isDark = document.documentElement.classList.contains('dark');
            
            if (isDark) {
              document.documentElement.classList.remove('dark');
              document.body.style.backgroundColor = "#ffffff";
              document.body.style.color = "#111827";
              localStorage.setItem('theme', 'light');
            } else {
              document.documentElement.classList.add('dark');
              document.body.style.backgroundColor = "#010101";
              document.body.style.color = "#f3f4f6";
              localStorage.setItem('theme', 'dark');
            }
          });
        }
      });
      
      // Theme-Status auch bei astro:after-swap neu prüfen (während einer View Transition)
      document.addEventListener('astro:after-swap', () => {
        const theme = localStorage.getItem('theme');
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
          document.body.style.backgroundColor = "#010101";
          document.body.style.color = "#f3f4f6";
        } else {
          document.documentElement.classList.remove('dark');
          document.body.style.backgroundColor = "#ffffff";
          document.body.style.color = "#111827";
        }
      });
    </script>
  </body>
</html>
