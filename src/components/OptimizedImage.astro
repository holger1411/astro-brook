---
import { Image } from 'astro:assets';

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'eager' | 'lazy';
  decoding?: 'async' | 'auto' | 'sync';
  sizes?: string;
}

const { 
  src, 
  alt, 
  width = 800, 
  height = Math.round(width * (9/16)), // Default to 16:9 aspect ratio if height not specified
  class: className = "",
  loading = "lazy",
  decoding = "async",
  sizes = "(min-width: 1024px) 800px, 100vw"
} = Astro.props;

// Function to validate if an image path is valid
function isValidImagePath(path) {
  if (!path) return false;
  // Check if it has a valid extension
  const validExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.avif', '.svg', '.gif'];
  const hasValidExtension = validExtensions.some(ext => 
    path.toLowerCase().endsWith(ext)
  );
  
  // Make sure it starts with a slash if it's a local path
  return hasValidExtension && (path.startsWith('/') || path.startsWith('http'));
}

// Make sure image is valid
const validImage = isValidImagePath(src) ? src : null;

// Process the image source
// If it's a remote image or an image in the public directory
// we need to create a URL object for Astro's Image component
let imageSrc;
if (validImage) {
  if (validImage.startsWith('http')) {
    // For remote images
    imageSrc = validImage;
  } else if (validImage.startsWith('/')) {
    // For images in the public directory
    // We need to use the full URL
    const baseUrl = import.meta.env.SITE || 'http://localhost:4321';
    imageSrc = new URL(validImage, baseUrl);
  }
}
---

{validImage ? (
  <Image 
    src={imageSrc}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={loading}
    decoding={decoding}
    sizes={sizes}
    format="webp"
    quality={80}
  />
) : (
  <div class={`bg-gray-200 flex items-center justify-center ${className}`} style={`width: ${width}px; height: ${height}px; max-width: 100%;`}>
    <span class="text-gray-400 text-sm text-center p-4">{alt || "Image unavailable"}</span>
  </div>
)}
