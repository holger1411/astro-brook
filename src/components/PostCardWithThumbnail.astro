---
import { formatDate } from '../utils/date';
import OptimizedImage from './OptimizedImage.astro';

interface Props {
  post: {
    slug: string;
    url: string;
    frontmatter: {
      title: string;
      date: string;
      excerpt: string;
      image?: string;
      tags?: string[];
    };
  };
  showExcerpt?: boolean;
  showTags?: boolean;
}

const { post, showExcerpt = true, showTags = true } = Astro.props;
const { title, date, excerpt, image, tags } = post.frontmatter;

// Function to validate if an image path is valid
function isValidImagePath(path) {
  if (!path) return false;
  // Check if it has a valid extension
  const validExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.avif', '.svg', '.gif'];
  const hasValidExtension = validExtensions.some(ext => 
    path.toLowerCase().endsWith(ext)
  );
  
  // Make sure it starts with a slash if it's a local path
  return hasValidExtension && (path.startsWith('/') || path.startsWith('http'));
}

// Make sure image is valid
const validImage = isValidImagePath(image) ? image : null;
---

<article class="border-t border-gray-200 py-[4vh] xl:py-8" transition:name={`post-${post.slug}`}>
  <div class="flex flex-col sm:flex-row items-center gap-8">
    {validImage && (
      <a 
        href={post.url} 
        class="block sm:min-w-[120px] sm:w-[120px] h-[120px] overflow-hidden rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        aria-label={`View ${title} article`}
      >
        <OptimizedImage
          src={validImage}
          alt={`Preview image for ${title}`}
          width={240} // Double size for high-DPI displays
          height={240}
          class="w-full h-full object-cover transition-transform hover:scale-105"
          loading="lazy"
          decoding="async"
          sizes="120px"
        />
      </a>
    )}
    
    <div class="space-y-2 flex-1">
      <div class="flex flex-col sm:flex-row justify-between items-start gap-2 mb-2">
        <h2 class="text-xl md:text-2xl">
          <a href={post.url} class="hover:underline focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 rounded">
            {title}
          </a>
        </h2>
        <time 
          datetime={new Date(date).toISOString()}
          class="text-gray-500 text-sm shrink-0 sm:ml-4 sm:text-right"
        >
          {formatDate(date)}
        </time>
      </div>
      
      {showTags && tags && tags.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-2" aria-label="Tags">
          {tags.map((tag) => (
            <a
              href={`/tags/${tag}`}
              class="inline-flex items-center rounded-md bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-800 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              aria-label={`View all posts tagged ${tag}`}
            >
              {tag}
            </a>
          ))}
        </div>
      )}
      
      {showExcerpt && (
        <>
          <p class="text-gray-500">{excerpt}</p>
          <div>
            <a 
              href={post.url} 
              class="text-sm font-medium hover:underline focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 rounded px-2 py-1 inline-block"
              aria-label={`Read more about ${title}`}
            >
              Read more <span aria-hidden="true">â†’</span>
            </a>
          </div>
        </>
      )}
    </div>
  </div>
</article>

<style>
  /* Styles for tags */
  article a[href^="/tags/"] {
    background-color: #f3f4f6;
    color: #333;
  }
  
  article a[href^="/tags/"]:hover {
    background-color: #e5e7eb;
  }
</style>